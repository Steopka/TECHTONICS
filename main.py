# -*- coding: utf-8 -*-
import logging
import os
import requests
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    CallbackQueryHandler,
    filters,
    ContextTypes,
)
from datetime import datetime, timedelta

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "8071128622:AAFgeGieQRDNRxKTONRf52wm-RP4Z9aIvA4"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
GEOAPIFY_API_KEY = os.environ.get("GEOAPIFY_API_KEY", "da31de3622fc4ee2a0112ab2f28391aa")

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –°–æ—á–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
SOCHI_LAT = 43.5855
SOCHI_LON = 39.7303
SEARCH_RADIUS_METERS = 15000
RESULT_LIMIT = 50

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CATEGORIES = {
    "–ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏": "natural,leisure.park",
    "–ó–∞–≤–µ–¥–µ–Ω–∏—è": "catering.restaurant,catering.cafe,catering.fast_food",
    "–ü–ª—è–∂–∏": "beach",
    "–û—Ç–µ–ª–∏ –∏ –≥–æ—Å—Ç–∏–Ω–∏—Ü—ã": "accommodation.hotel,accommodation.guest_house",
    "–¢–µ–∞—Ç—Ä—ã –∏ –º—É–∑–µ–∏": "entertainment.culture.theatre,entertainment.culture.gallery",
    "–û–∫–µ–∞–Ω–∞—Ä–∏—É–º –∏ –î–µ–ª—å—Ñ–∏–Ω–∞—Ä–∏–π": "entertainment.aquarium",
    "–°—É–≤–µ–Ω–∏—Ä—ã": "commercial.gift_and_souvenir",
    "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã": "tourism",
    "–ë–∏–ª–µ—Ç—ã –†–ñ–î": "rzd_tickets",
}

# –°—Ç–∞–Ω—Ü–∏–∏ –¥–ª—è –†–ñ–î
STATIONS = {
    "–°–æ—á–∏": "2004000",
    "–ú–æ—Å–∫–≤–∞": "2000000",
    "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥": "2006000",
    "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä": "2034000",
    "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É": "2024000",
}


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î (–∑–∞–≥–ª—É—à–∫–∞)
def get_rzd_tickets(from_station, to_station, date):
    try:
        # –ü—Ä–∏–º–µ—Ä–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –±–∏–ª–µ—Ç–æ–≤
        tickets = [
            {
                "train": "044–°",
                "departure": f"{date} 08:30",
                "arrival": f"{date} 20:45",
                "duration": "12—á 15–º",
                "classes": {
                    "–ü–ª–∞—Ü–∫–∞—Ä—Ç": {"price": 2500, "seats": 15},
                    "–ö—É–ø–µ": {"price": 4500, "seats": 8}
                }
            },
            {
                "train": "104–í",
                "departure": f"{date} 18:15",
                "arrival": f"{date} 06:30+1",
                "duration": "12—á 15–º",
                "classes": {
                    "–ü–ª–∞—Ü–∫–∞—Ä—Ç": {"price": 2700, "seats": 10},
                    "–ö—É–ø–µ": {"price": 4900, "seats": 5},
                    "–°–í": {"price": 7500, "seats": 3}
                }
            }
        ]
        return tickets, None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î: {e}")
        return None, f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –¥–∞–Ω–Ω—ã—Ö –æ –±–∏–ª–µ—Ç–∞—Ö: {e}"


# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Geoapify
def search_places(selected_keys):
    if "rzd_tickets" in selected_keys:
        return [], None

    geoapify_categories_set = set()
    for key in selected_keys:
        if key in CATEGORIES:
            codes = CATEGORIES[key].split(',')
            geoapify_categories_set.update(c.strip() for c in codes if c.strip())

    if not geoapify_categories_set:
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥—ã Geoapify –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    api_params = {
        'categories': ",".join(geoapify_categories_set),
        'filter': f"circle:{SOCHI_LON},{SOCHI_LAT},{SEARCH_RADIUS_METERS}",
        'bias': f"proximity:{SOCHI_LON},{SOCHI_LAT}",
        'limit': RESULT_LIMIT,
        'apiKey': GEOAPIFY_API_KEY
    }

    api_url = "https://api.geoapify.com/v2/places"
    found_places = []
    error_message = None

    try:
        response = requests.get(api_url, params=api_params, timeout=20)
        response.raise_for_status()
        data = response.json()

        if data.get('features'):
            for feature in data['features']:
                properties = feature.get('properties', {})
                name = properties.get('name')
                lon = properties.get('lon')
                lat = properties.get('lat')
                if name and lon is not None and lat is not None:
                    address = properties.get('formatted', '–ê–¥—Ä–µ—Å –Ω–µ —É–∫–∞–∑–∞–Ω')
                    map_link = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=16/{lat}/{lon}"
                    found_places.append({
                        'name': name,
                        'address': address,
                        'map_link': map_link,
                    })

        if not found_places:
            selected_names = ", ".join(selected_keys)
            error_message = f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ({selected_names}) –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    except requests.exceptions.Timeout:
        error_message = "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ: —Å–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª –≤–æ–≤—Ä–µ–º—è."
    except requests.exceptions.RequestException as e:
        error_message = f"–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}"
    except Exception as e:
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞: {e}"

    return found_places, error_message


# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton(cat, callback_data=f"category_{cat}")]
        for cat in CATEGORIES.keys()
    ]
    reply_markup = InlineKeyboardMarkup(keyboard)

    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ –º–µ—Å—Ç –≤ –°–æ—á–∏ –∏ –ø–æ–∫—É–ø–∫–∏ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î.\n"
        "–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:",
        reply_markup=reply_markup
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–æ–∫
async def button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    user_data = context.user_data
    if "selected_categories" not in user_data:
        user_data["selected_categories"] = []

    callback_data = query.data

    if callback_data.startswith("category_"):
        category = callback_data[9:]
        if category in user_data["selected_categories"]:
            user_data["selected_categories"].remove(category)
            await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' —É–¥–∞–ª–µ–Ω–∞.")
        else:
            user_data["selected_categories"].append(category)
            await query.edit_message_text(f"–ö–∞—Ç–µ–≥–æ—Ä–∏—è '{category}' –¥–æ–±–∞–≤–ª–µ–Ω–∞.")

        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
        keyboard = [
            [InlineKeyboardButton(
                f"{'‚úÖ ' if cat in user_data['selected_categories'] else ''}{cat}",
                callback_data=f"category_{cat}"
            )]
            for cat in CATEGORIES.keys()
        ]
        keyboard.append([InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="done")])

        await query.edit_message_reply_markup(
            reply_markup=InlineKeyboardMarkup(keyboard)
        )

    elif callback_data == "done":
        selected = user_data.get("selected_categories", [])
        if not selected:
            await query.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏.")
            return

        if "–ë–∏–ª–µ—Ç—ã –†–ñ–î" in selected:
            keyboard = [
                [InlineKeyboardButton("–°–æ—á–∏ - –ú–æ—Å–∫–≤–∞", callback_data="route_sochi_moscow")],
                [InlineKeyboardButton("–°–æ—á–∏ - –°–ü–±", callback_data="route_sochi_spb")],
                [InlineKeyboardButton("–°–æ—á–∏ - –ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", callback_data="route_sochi_krasnodar")],
                [InlineKeyboardButton("–î—Ä—É–≥–æ–π –º–∞—Ä—à—Ä—É—Ç", callback_data="route_custom")],
            ]
            await query.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç:",
                reply_markup=InlineKeyboardMarkup(keyboard)
            )
        else:
            places, error = search_places(selected)
            response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(selected)}\n\n"

            if error:
                response += error
            elif places:
                for place in places[:5]:
                    response += (
                        f"üìç {place['name']}\n"
                        f"–ê–¥—Ä–µ—Å: {place['address']}\n"
                        f"–ö–∞—Ä—Ç–∞: {place['map_link']}\n\n"
                    )
            else:
                response += "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

            await query.message.reply_text(response)
            user_data["selected_categories"] = []

    elif callback_data.startswith("route_"):
        route = callback_data[6:]

        if route == "sochi_moscow":
            from_st, to_st = "–°–æ—á–∏", "–ú–æ—Å–∫–≤–∞"
        elif route == "sochi_spb":
            from_st, to_st = "–°–æ—á–∏", "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥"
        elif route == "sochi_krasnodar":
            from_st, to_st = "–°–æ—á–∏", "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä"
        else:
            await query.message.reply_text("–í–≤–µ–¥–∏—Ç–µ –º–∞—Ä—à—Ä—É—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –ì–æ—Ä–æ–¥ - –ì–æ—Ä–æ–¥")
            return

        date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
        tickets, error = get_rzd_tickets(from_st, to_st, date)

        if error:
            await query.message.reply_text(error)
            return

        if not tickets:
            await query.message.reply_text(f"–ù–∞ {date} –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–≤ {from_st} - {to_st}.")
            return

        response = f"üöÇ –ü–æ–µ–∑–¥–∞ {from_st} - {to_st} –Ω–∞ {date}:\n\n"
        for ticket in tickets:
            response += (
                f"–ü–æ–µ–∑–¥ {ticket['train']}\n"
                f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {ticket['departure']}\n"
                f"–ü—Ä–∏–±—ã—Ç–∏–µ: {ticket['arrival']}\n"
                f"–í –ø—É—Ç–∏: {ticket['duration']}\n"
            )
            for cls, info in ticket['classes'].items():
                response += f"- {cls}: {info['price']} —Ä—É–±. (–º–µ—Å—Ç: {info['seats']})\n"
            response += "\n"

        response += "üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: https://pass.rzd.ru"
        await query.message.reply_text(response)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –±–∏–ª–µ—Ç–æ–≤ –†–ñ–î
    if " - " in text and any(word in text.lower() for word in ["–±–∏–ª–µ—Ç", "–ø–æ–µ–∑–¥", "—Ä–∂–¥"]):
        parts = [p.strip() for p in text.split(" - ") if p.strip()]
        if len(parts) == 2:
            from_st, to_st = parts
            date = (datetime.now() + timedelta(days=1)).strftime("%d.%m.%Y")
            tickets, error = get_rzd_tickets(from_st, to_st, date)

            if error:
                await update.message.reply_text(error)
                return

            if not tickets:
                await update.message.reply_text(f"–ù–∞ {date} –Ω–µ—Ç –ø–æ–µ–∑–¥–æ–≤ {from_st} - {to_st}.")
                return

            response = f"üöÇ –ü–æ–µ–∑–¥–∞ {from_st} - {to_st} –Ω–∞ {date}:\n\n"
            for ticket in tickets:
                response += (
                    f"–ü–æ–µ–∑–¥ {ticket['train']}\n"
                    f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: {ticket['departure']}\n"
                    f"–ü—Ä–∏–±—ã—Ç–∏–µ: {ticket['arrival']}\n"
                    f"–í –ø—É—Ç–∏: {ticket['duration']}\n"
                )
                for cls, info in ticket['classes'].items():
                    response += f"- {cls}: {info['price']} —Ä—É–±. (–º–µ—Å—Ç: {info['seats']})\n"
                response += "\n"

            response += "üîó –ö—É–ø–∏—Ç—å –±–∏–ª–µ—Ç—ã: https://pass.rzd.ru"
            await update.message.reply_text(response)
            return

    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    selected = [cat.strip() for cat in text.split(',') if cat.strip() in CATEGORIES]
    if not selected:
        categories_list = "\n".join(f"- {cat}" for cat in CATEGORIES.keys())
        await update.message.reply_text(
            f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_list}\n"
            "–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /start –¥–ª—è –≤—ã–±–æ—Ä–∞."
        )
        return

    places, error = search_places(selected)
    response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {', '.join(selected)}\n\n"

    if error:
        response += error
    elif places:
        for place in places[:5]:
            response += (
                f"üìç {place['name']}\n"
                f"–ê–¥—Ä–µ—Å: {place['address']}\n"
                f"–ö–∞—Ä—Ç–∞: {place['map_link']}\n\n"
            )
    else:
        response += "–ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ."

    await update.message.reply_text(response)


# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    app = ApplicationBuilder().token(TOKEN).build()

    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(button))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))

    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()


if __name__ == "__main__":
    if GEOAPIFY_API_KEY and GEOAPIFY_API_KEY != "YOUR_API_KEY":
        main()
    else:
        logger.error("–û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π Geoapify API –∫–ª—é—á!")