import logging
import os
import requests
from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)
import openai

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s", level=logging.INFO
)
logger = logging.getLogger(__name__)

# –¢–æ–∫–µ–Ω –≤–∞—à–µ–≥–æ –±–æ—Ç–∞
TOKEN = "8071128622:AAFgeGieQRDNRxKTONRf52wm-RP4Z9aIvA4"

# --- –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø ---
GEOAPIFY_API_KEY = "8259951e9fb5448fb2a04a11629d1085"
OPENAI_API_KEY = "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"

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è OpenAI ---
openai_enabled = False
if OPENAI_API_KEY and OPENAI_API_KEY != "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":
    try:
        openai.api_key = OPENAI_API_KEY
        openai_enabled = True
        logger.info("OpenAI API –∫–ª—é—á –Ω–∞–π–¥–µ–Ω –∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ OpenAI: {e}")
else:
    logger.warning("\n!!! –í–ù–ò–ú–ê–ù–ò–ï: OpenAI API –ö–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω !!!\n")

# –ö–æ–æ—Ä–¥–∏–Ω–∞—Ç—ã –°–æ—á–∏ –∏ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–∏—Å–∫–∞
SOCHI_LAT = 43.5855
SOCHI_LON = 39.7303
SEARCH_RADIUS_METERS = 15000
RESULT_LIMIT = 50

# –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞
CATEGORIES = {
    "–ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏": "natural,leisure.park",
    "–ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è (–ö–∞—Ñ–µ, –†–µ—Å—Ç–æ—Ä–∞–Ω—ã)": "catering.restaurant,catering.cafe,catering.fast_food",
    "–ü–ª—è–∂–∏": "beach",
    "–ì–æ—Ä—ã –∏ —Ç—Ä–µ–∫–∫–∏–Ω–≥": "natural.mountain_peak,tourism.attraction",
    "–°–ø–æ—Ä—Ç –∏ —Ñ–∏—Ç–Ω–µ—Å": "sport,leisure.fitness_centre",
    "–ö—É–ª—å—Ç—É—Ä–∞ –∏ –∏—Å—Ç–æ—Ä–∏—è": "tourism.attraction,historic,entertainment.museum,building.historic",
    "–†–∞–∑–≤–ª–µ—á–µ–Ω–∏—è –∏ –Ω–æ—á–Ω–∞—è –∂–∏–∑–Ω—å": "entertainment,nightlife",
    "–¢—É—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã": "tourism",
}

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç LLM
def get_llm_recommendations(interests_list):
    if not openai_enabled:
        return "–°–µ—Ä–≤–∏—Å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω (API –∫–ª—é—á OpenAI –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –Ω–µ–¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω)."
    try:
        interests_str = ", ".join(interests_list)
        prompt = (
            f"–Ø –ø–ª–∞–Ω–∏—Ä—É—é –ø–æ–µ–∑–¥–∫—É –≤ –°–æ—á–∏, –†–æ—Å—Å–∏—è, –∏ –º–æ–∏ –∏–Ω—Ç–µ—Ä–µ—Å—ã –≤–∫–ª—é—á–∞—é—Ç: {interests_str}. "
            f"–ü—Ä–µ–¥–ª–æ–∂–∏, –∫–∞–∫–∏–µ –º–µ—Å—Ç–∞ –º–Ω–µ —Å—Ç–æ–∏—Ç –ø–æ—Å–µ—Ç–∏—Ç—å, –∏ –¥–∞–π –∫—Ä–∞—Ç–∫–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ (2-3 –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è –Ω–∞ –º–µ—Å—Ç–æ). "
            f"–£–∫–∞–∂–∏ –Ω–µ –±–æ–ª–µ–µ 3 –º–µ—Å—Ç, —á—Ç–æ–±—ã –æ—Ç–≤–µ—Ç –±—ã–ª –ª–∞–∫–æ–Ω–∏—á–Ω—ã–º."
        )
        response = openai.ChatCompletion.create(
            model="gpt-4",
            messages=[
                {"role": "system", "content": "–¢—ã —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—É—Ç–µ—à–µ—Å—Ç–≤–∏—è–º, –∑–Ω–∞—é—â–∏–π –°–æ—á–∏."},
                {"role": "user", "content": prompt}
            ],
            max_tokens=500,
            temperature=0.7
        )
        return response.choices[0].message.content.strip()
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—Ä–æ—Å–µ –∫ OpenAI: {e}")
        return "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏ —Å–µ—Ä–≤–∏—Å–∞."

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –º–µ—Å—Ç –∫ Geoapify
def search_places(selected_keys):
    geoapify_categories = set()
    for key in selected_keys:
        if key in CATEGORIES:
            codes = CATEGORIES[key].split(',')
            geoapify_categories.update(c.strip() for c in codes)

    if not geoapify_categories:
        return None, "–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫–æ–¥—ã Geoapify –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π."

    api_params = {
        'categories': ",".join(geoapify_categories),
        'filter': f"circle:{SOCHI_LON},{SOCHI_LAT},{SEARCH_RADIUS_METERS}",
        'bias': f"proximity:{SOCHI_LON},{SOCHI_LAT}",
        'limit': RESULT_LIMIT,
        'apiKey': GEOAPIFY_API_KEY
    }
    api_url = "https://api.geoapify.com/v2/places"
    found_places = []
    error_message = None

    try:
        response = requests.get(api_url, params=api_params, timeout=15)
        response.raise_for_status()
        data = response.json()

        if data.get('features'):
            for feature in data['features']:
                properties = feature.get('properties', {})
                name = properties.get('name')
                lon = properties.get('lon')
                lat = properties.get('lat')
                address = properties.get('formatted', '')
                place_categories = properties.get('categories', [])

                if name and lon and lat:
                    map_link = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=16/{lat}/{lon}"
                    found_places.append({
                        'name': name,
                        'lat': lat,
                        'lon': lon,
                        'map_link': map_link,
                        'address': address,
                        'place_categories': place_categories,
                    })
        else:
            error_message = f"–ü–æ –≤–∞—à–µ–º—É –∑–∞–ø—Ä–æ—Å—É ({', '.join(selected_keys)}) –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ä–∞–π–æ–Ω–µ –°–æ—á–∏."

    except requests.exceptions.RequestException as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ Geoapify API: {e}")
        error_message = f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –æ—Ç Geoapify. –û—à–∏–±–∫–∞: {e}"
        found_places = []
    except Exception as e:
        logger.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
        error_message = f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –≤–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞: {e}"
        found_places = []

    return found_places, error_message

# –ö–æ–º–∞–Ω–¥–∞ /start
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    categories_list = "\n".join([f"- {cat}" for cat in CATEGORIES.keys()])
    await update.message.reply_text(
        f"–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –ø–æ–º–æ–∂–µ—Ç –Ω–∞–π—Ç–∏ –∏–Ω—Ç–µ—Ä–µ—Å–Ω—ã–µ –º–µ—Å—Ç–∞ –≤ –°–æ—á–∏. "
        f"–ù–∞–ø–∏—à–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É—é—Ç, —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é (–Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏, –ü–ª—è–∂–∏, –ì–∞—Å—Ç—Ä–æ–Ω–æ–º–∏—è). "
        f"–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_list}"
    )

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
async def handle_message(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text.strip()
    logger.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{text}'")
    user_id = update.message.from_user.id

    try:
        # –û–∂–∏–¥–∞–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, —Ä–∞–∑–¥–µ–ª—ë–Ω–Ω—ã–µ –∑–∞–ø—è—Ç—ã–º–∏
        selected_categories = [cat.strip() for cat in text.split(',')]
        valid_categories = [cat for cat in selected_categories if cat in CATEGORIES]

        if not valid_categories:
            categories_list = "\n".join([f"- {cat}" for cat in CATEGORIES.keys()])
            await update.message.reply_text(
                f"–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É –ø—Ä–∞–≤–∏–ª—å–Ω—É—é –∫–∞—Ç–µ–≥–æ—Ä–∏—é. –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:\n{categories_list}"
            )
            return

        # –ü–æ–∏—Å–∫ –º–µ—Å—Ç —á–µ—Ä–µ–∑ Geoapify
        places, error_message = search_places(valid_categories)
        response = f"–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –¥–ª—è –∫–∞—Ç–µ–≥–æ—Ä–∏–π: {', '.join(valid_categories)}\n\n"

        if error_message and not places:
            await update.message.reply_text(error_message)
            return

        if places:
            for place in places[:5]:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 5 –º–µ—Å—Ç –¥–ª—è –ª–∞–∫–æ–Ω–∏—á–Ω–æ—Å—Ç–∏
                response += (
                    f"üìç {place['name']}\n"
                    f"–ê–¥—Ä–µ—Å: {place['address']}\n"
                    f"–ö–∞—Ä—Ç–∞: {place['map_link']}\n"
                    f"---\n"
                )
        else:
            response += "–ú–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.\n"

        # –ü–æ–ª—É—á–µ–Ω–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π –æ—Ç LLM
        llm_recommendations = get_llm_recommendations(valid_categories)
        response += f"\n–ü–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:\n{llm_recommendations}"

        await update.message.reply_text(response)

    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞: {e}")
        await update.message.reply_text(
            "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞. –£–±–µ–¥–∏—Å—å, —á—Ç–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ —É–∫–∞–∑–∞–Ω—ã –ø—Ä–∞–≤–∏–ª—å–Ω–æ, –Ω–∞–ø—Ä–∏–º–µ—Ä: –ü—Ä–∏—Ä–æ–¥–∞ –∏ –ø–∞—Ä–∫–∏, –ü–ª—è–∂–∏."
        )

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
def main():
    application = ApplicationBuilder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, handle_message))
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

if __name__ == "__main__":
    if not GEOAPIFY_API_KEY or GEOAPIFY_API_KEY == "YOUR_API_KEY":
        logger.error("\n!!! –í–ù–ò–ú–ê–ù–ò–ï: Geoapify API –ö–ª—é—á –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω !!!\n")
    else:
        main()